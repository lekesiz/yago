# Default values for YAGO
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imagePullSecrets: []
  storageClass: "standard"

# Namespace
namespace: yago

# Backend configuration
backend:
  enabled: true
  replicaCount: 3

  image:
    repository: yago/backend
    tag: "v7.2"
    pullPolicy: Always

  service:
    type: ClusterIP
    port: 8000
    annotations: {}

  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 2000m
      memory: 2Gi

  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1

  startupProbe:
    enabled: true
    initialDelaySeconds: 0
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 30
    successThreshold: 1

  env:
    ENVIRONMENT: "production"
    LOG_LEVEL: "info"
    BACKEND_PORT: "8000"
    BACKEND_HOST: "0.0.0.0"
    BACKEND_WORKERS: "4"
    DATABASE_PATH: "/data/yago.db"
    METRICS_ENABLED: "true"
    HEALTH_CHECK_ENABLED: "true"
    CORS_ORIGINS: "*"
    ENABLE_PLUGINS: "true"
    ENABLE_COLLABORATION: "true"
    ENABLE_MONITORING: "true"

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Frontend configuration
frontend:
  enabled: true
  replicaCount: 2

  image:
    repository: yago/frontend
    tag: "v7.2"
    pullPolicy: Always

  service:
    type: ClusterIP
    port: 3000
    annotations: {}

  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 1Gi

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 6
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 85

  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1

  env:
    NODE_ENV: "production"
    PORT: "3000"

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"

  hosts:
    - host: yago.example.com
      paths:
        - path: /api
          pathType: Prefix
          backend: backend
        - path: /ws
          pathType: Prefix
          backend: backend
        - path: /
          pathType: Prefix
          backend: frontend

  tls:
    - secretName: yago-tls-cert
      hosts:
        - yago.example.com

# Persistence
persistence:
  enabled: true

  data:
    enabled: true
    storageClass: "standard"
    accessMode: ReadWriteOnce
    size: 10Gi
    annotations: {}

  plugins:
    enabled: true
    storageClass: "standard"
    accessMode: ReadWriteOnce
    size: 5Gi
    annotations: {}

# Secrets (override in production!)
secrets:
  # API Keys
  openaiApiKey: "sk-your-openai-key-here"
  anthropicApiKey: "sk-ant-your-anthropic-key-here"
  googleApiKey: "your-google-api-key-here"

  # Database credentials
  dbUsername: "yago"
  dbPassword: "change-me-in-production"

  # Redis password
  redisPassword: ""

  # Session and JWT secrets
  sessionSecret: "change-this-to-a-random-secret-key"
  jwtSecret: "change-this-to-a-random-jwt-secret"

  # Encryption key
  encryptionKey: "change-this-to-32-character-key"

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

# Pod Security Policy
podSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  capabilities:
    drop:
      - ALL

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: false  # Set to true if using Prometheus Operator
    interval: 30s
    scrapeTimeout: 10s

# Redis (optional - for caching and session management)
redis:
  enabled: false
  architecture: standalone
  auth:
    enabled: false
  master:
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 512Mi

# PostgreSQL (optional - for production database)
postgresql:
  enabled: false
  auth:
    username: yago
    password: yago
    database: yago
  primary:
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
      limits:
        cpu: 1000m
        memory: 1Gi
