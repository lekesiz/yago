# Multi-stage build for YAGO Backend
# Optimized for production use

# Stage 1: Builder
FROM python:3.11-slim as builder

# Set working directory
WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    make \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY yago/requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 2: Runtime
FROM python:3.11-slim

# Set labels
LABEL maintainer="YAGO Team <team@yago.dev>"
LABEL description="YAGO Backend - AI Agent Orchestration Platform"
LABEL version="7.2"

# Create non-root user
RUN groupadd -r yago && useradd -r -g yago -u 1000 yago

# Set working directory
WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy Python dependencies from builder
COPY --from=builder /root/.local /home/yago/.local

# Copy application code
COPY --chown=yago:yago yago/ ./yago/

# Create necessary directories
RUN mkdir -p /data /app/yago/plugins/installed && \
    chown -R yago:yago /data /app

# Switch to non-root user
USER yago

# Set environment variables
ENV PATH=/home/yago/.local/bin:$PATH \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    ENVIRONMENT=production \
    DATABASE_PATH=/data/yago.db

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/monitoring/health/liveness || exit 1

# Run application
CMD ["python", "-m", "uvicorn", "yago.web.backend.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
