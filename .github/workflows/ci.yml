# YAGO v7.1 - Continuous Integration Pipeline
# Runs tests, linting, and builds on every push and PR

name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  # Backend Testing
  backend-tests:
    name: Backend Tests & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd yago
          pip install -r requirements.txt
          pip install pytest pytest-cov ruff black

      - name: Run Ruff linter
        run: |
          cd yago
          ruff check .

      - name: Run Black formatter check
        run: |
          cd yago
          black --check .

      - name: Run pytest
        run: |
          cd yago
          pytest --cov=. --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./yago/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: yago/web/frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd yago/web/frontend
          npm ci

      - name: Run ESLint
        run: |
          cd yago/web/frontend
          npm run lint

      - name: Run TypeScript check
        run: |
          cd yago/web/frontend
          npx tsc --noEmit

      - name: Build frontend
        run: |
          cd yago/web/frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: yago/web/frontend/dist

  # API Integration Tests
  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd yago
          pip install -r requirements.txt

      - name: Start backend server
        run: |
          cd yago/web/backend
          python api.py &
          sleep 10

      - name: Run API tests
        run: |
          cd /Users/mikail/Desktop/YAGO
          chmod +x test_api_endpoints.sh
          ./test_api_endpoints.sh

      - name: Stop backend server
        if: always()
        run: pkill -f "python api.py" || true

  # E2E Tests
  e2e-tests:
    name: E2E Tests with Playwright
    runs-on: ubuntu-latest
    needs: [frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: yago/web/frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd yago/web/frontend
          npm ci

      - name: Install Playwright browsers
        run: |
          cd yago/web/frontend
          npx playwright install --with-deps chromium

      - name: Set up Python for backend
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install backend dependencies
        run: |
          cd yago
          pip install -r requirements.txt

      - name: Start backend server
        run: |
          cd yago/web/backend
          python clarification_api.py &
          sleep 10

      - name: Run E2E tests
        run: |
          cd yago/web/frontend
          npm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: yago/web/frontend/playwright-report/
          retention-days: 30

      - name: Upload test videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-videos
          path: yago/web/frontend/test-results/
          retention-days: 7

      - name: Stop backend server
        if: always()
        run: pkill -f "python clarification_api.py" || true

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./yago/web/backend
          file: ./yago/web/backend/Dockerfile
          push: false
          tags: yago-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./yago/web/frontend
          file: ./yago/web/frontend/Dockerfile
          push: false
          tags: yago-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
